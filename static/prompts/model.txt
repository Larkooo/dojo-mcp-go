When working with Dojo models, remember these critical points:

1. Models are Cairo structs with the #[dojo::model] attribute
2. ALWAYS derive Drop and Serde traits for models (#[derive(Drop, Serde)])
3. Every model MUST have at least one #[key] attribute
4. All #[key] fields MUST come before non-key fields in the struct
5. Models are upgradeable but with limitations:
   - Layout must not be packed (avoid IntrospectPacked for upgradeable models)
   - Existing elements cannot be removed, only modified according to rules
   - Each element must keep the same type, name, and attributes

6. For nested structs:
   - Inner structs do NOT use the #[dojo::model] attribute
   - Inner structs do NOT have #[key] attributes
   - Inner structs must implement Introspect trait

7. For enums:
   - Derive necessary traits (#[derive(Serde, Drop, Introspect)])
   - Consider variant data types carefully

8. Follow ECS best practices:
   - Keep models small and isolated
   - Reuse models across entity types
   - Use composite keys when needed
9. Make sure members, structs, enums etc.. are correctly visible. You should make them public by putting `pub` in front of them, for ones that can be accessed from systems.
10. YOU CANNOT use the Copy trait when dealing with Array. If an array is in a struct, dont put the Copy trait on it, same for upper level parents. Be mindful of traits you derive

Please address the following user request about Dojo models:
{{prompt}}

The documentation below provides additional details that may help you respond:
{{insight}}

You should refer to this most up to date example here
use starknet::ContractAddress;

#[derive(Serde, Copy, Drop, Introspect, PartialEq, Debug)]
pub enum Direction {
    None,
    Left,
    Right,
    Up,
    Down,
}

impl DirectionIntoFelt252 of Into<Direction, felt252> {
    fn into(self: Direction) -> felt252 {
        match self {
            Direction::None => 0,
            Direction::Left => 1,
            Direction::Right => 2,
            Direction::Up => 3,
            Direction::Down => 4,
        }
    }
}

#[derive(Drop, Serde)]
#[dojo::model]
pub struct Message {
    #[key]
    pub identity: ContractAddress,
    #[key]
    pub channel: felt252,
    #[key]
    pub salt: felt252,
    pub message: ByteArray,
}

#[derive(Copy, Drop, Serde, Debug)]
#[dojo::model]
pub struct Moves {
    #[key]
    pub player: ContractAddress,
    pub remaining: u8,
    pub last_direction: Direction,
}

#[derive(Copy, Drop, Serde, Debug)]
#[dojo::model]
pub struct MockToken {
    #[key]
    pub account: ContractAddress,
    pub amount: u128,
}

#[derive(Copy, Drop, Serde, IntrospectPacked, Debug)]
pub struct Vec2 {
    pub x: u32,
    pub y: u32,
}

// If `Vec2` wasn't packed, the `Position` would be invalid,
// and a runtime error would be thrown.
// Any field that is a custom type into a `IntrospectPacked` type
// must be packed.
#[derive(Copy, Drop, Serde, IntrospectPacked, Debug)]
#[dojo::model]
pub struct Position {
    #[key]
    pub player: ContractAddress,
    pub vec: Vec2,
}

// Every field inside a model must derive `Introspect` or `IntrospectPacked`.
// `IntrospectPacked` can also be used into models that are only using `Introspect`.
#[derive(Copy, Drop, Serde, Introspect, PartialEq)]
pub struct PlayerItem {
    pub item_id: u32,
    pub quantity: u32,
    pub score: i32,
}

#[derive(Drop, Serde)]
#[dojo::model]
pub struct PlayerConfig {
    #[key]
    pub player: ContractAddress,
    pub name: ByteArray,
    pub items: Array<PlayerItem>,
    pub favorite_item: Option<u32>,
}

#[derive(Drop, Serde)]
#[dojo::model]
pub struct ServerProfile {
    #[key]
    pub player: ContractAddress,
    #[key]
    pub server_id: u32,
    pub name: ByteArray,
}

trait Vec2Trait {
    fn is_zero(self: Vec2) -> bool;
    fn is_equal(self: Vec2, b: Vec2) -> bool;
}

impl Vec2Impl of Vec2Trait {
    fn is_zero(self: Vec2) -> bool {
        if self.x - self.y == 0 {
            return true;
        }
        false
    }

    fn is_equal(self: Vec2, b: Vec2) -> bool {
        self.x == b.x && self.y == b.y
    }
}

#[cfg(test)]
mod tests {
    use super::{Vec2, Vec2Trait};

    #[test]
    #[available_gas(100000)]
    fn test_vec_is_zero() {
        assert(Vec2Trait::is_zero(Vec2 { x: 0, y: 0 }), 'not zero');
    }

    #[test]
    #[available_gas(100000)]
    fn test_vec_is_equal() {
        let position = Vec2 { x: 420, y: 0 };
        assert(position.is_equal(Vec2 { x: 420, y: 0 }), 'not equal');
    }
}